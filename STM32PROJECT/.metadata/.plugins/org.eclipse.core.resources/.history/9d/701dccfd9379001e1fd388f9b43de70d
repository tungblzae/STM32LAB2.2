/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
	//TODO lab2ex1
	// Define pins for common cathode connection to seven-segment displays
	GPIO_TypeDef* COM_PORT = GPIOB;
	uint16_t COM_PINS[7] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6};
	int current_display = 0;

	void display7SEG(int num) {
		// Define the segment patterns for digits 0-9
		    // Assuming the display is connected to pins PB0 to PB6
		    uint8_t segmentPatterns[] = {
		        0b00111111, // 0
		        0b00000110, // 1
		        0b01011011, // 2
		        0b01001111, // 3
		        0b01100110, // 4
		        0b01101101, // 5
		        0b01111101, // 6
		        0b00000111, // 7
		        0b01111111, // 8
		        0b01101111  // 9
		    };

		    if (num >= 0 && num <= 9) {
		        // Set the GPIO pins PB0 to PB6 based on the segment pattern for the digit
		        GPIOB->ODR = segmentPatterns[num];
		    }
	}

	//lab2ex2
	// Timer interrupt callback
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	    if (htim->Instance == TIM2) {
	        // Timer interrupt occurred

	        // Display "1" on the first seven-segment display
	        if (current_display == 0) {
	            display7SEG(1);
	        }
	        // Display "2" on the second seven-segment display
	        else {
	            display7SEG(2);
	        }

	        // Increment the display index and ensure it stays within the valid range (0 to 1)
	        current_display = (current_display + 1) % 2;
	    }
	}
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	    if (htim->Instance == TIM2) {
	        // Timer interrupt occurred

	        // Display the data from the display_data array on the current display
	        display7SEG(display_data[current_display]);

	        // Toggle the DOT LED (PA4)
	        HAL_GPIO_TogglePin(DOT_PORT, DOT_PIN);

	        // Increment the display index and ensure it stays within the valid range (0 to 3)
	        current_display = (current_display + 1) % 4;
	    }
	}

	int main(void) {
	    // STM32 initialization and configuration

	    // Start the timer to generate periodic interrupts
	    HAL_TIM_Base_Start_IT(&htim2);

	    int counter = 0;

	    while (1) {
	        display_data[0] = counter;
	        counter++;
	    }
	}
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}
//
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
